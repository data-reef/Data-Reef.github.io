min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
#define extremes of the color ramps
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
# stupid function to reduce every span of numbers to the 0,1 interval
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(0/255, 218/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  218/255,   0/255,   0/255)))
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
#define extremes of the color ramps
#rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
#rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
# stupid function to reduce every span of numbers to the 0,1 interval
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
#define extremes of the color ramps
#rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
#rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
# stupid function to reduce every span of numbers to the 0,1 interval
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xright= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xleft= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
#define extremes of the color ramps
#rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
#rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
# stupid function to reduce every span of numbers to the 0,1 interval
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xright= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xleft= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
#define extremes of the color ramps
#rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
#rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
# stupid function to reduce every span of numbers to the 0,1 interval
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-50} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xright= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xleft= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ybottom= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ytop= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
#define extremes of the color ramps
#rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
rampk2g <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(218/255,   0/255,   0/255)))
rampk2r <- colorRampPalette(c(rgb(  0/255,   0/255,   0/255), rgb(  0/255, 218/255,   0/255)))
# stupid function to reduce every span of numbers to the 0,1 interval
prop <- function(x, lo=0, hi=100) {
if (is.na(x)) {NA}
else{
min(lo,hi)+x*(max(lo,hi)-min(lo,hi))
}
}
rangepropCA<-c(0,20)
rangepropCB<-c(0,20)
# define some default variables
if (!exists('alpha_default')) {alpha_default<-1} # opaque colors by default
if (!exists('palette_l')) {palette_l<-100} # how many steps in the palette
if (!exists('max_sat')) {max_sat<-200} # maximum saturation
colorpalette<-0:palette_l*(max_sat/255)/palette_l # her's finally the palette...
# first of all make an empy plot
plot(NULL, xlim=rangepropCA, ylim=rangepropCB, log='', xaxt='n', yaxt='n', xlab='prop A', ylab='prop B', bty='n', main='color field');
# then fill it up with rectangles each colored differently
for (m in 1:palette_l) {
for (n in 1:palette_l) {
rgbcol<-rgb(colorpalette[n],colorpalette[m],0, alpha_default);
rect(xleft= prop(x=(n-1)/(palette_l),rangepropCA[1],rangepropCA[2])
,xright= prop(x=(n)/(palette_l),rangepropCA[1],rangepropCA[2])
,ytop= prop(x=(m-1)/(palette_l),rangepropCB[1],rangepropCB[2])
,ybottom= prop(x=(m)/(palette_l),rangepropCB[1],rangepropCB[2])
,col=rgbcol
,border="transparent"
)
}
}
# done!
png('gi_b_c.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
i = 4
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
i=29
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_b_c.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
i = 4
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
i=29
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_index.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
for(i in 1:32){
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
}
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_index.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
for(i in 1:32){
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
}
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_index.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
for(i in 1:32){
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
}
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_index.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
for(i in 1:32){
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
}
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_index.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
for(i in 1:32){
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
}
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_b_c.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
i = 4
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
i=29
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_back.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
i = 4
#rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
i=29
#rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
dev.off()
}
setwd("~/Desktop/data-reef.github.io/data/GIIndex")
library("png")
require(biOps)
library(gtools)
# read a sample file (R logo)
mydata = read.csv("sg.csv")
png('gi_nob.png',width = 1920, height = 1080,units = "px",pointsize = 12)
dimX <- 5/1
dimy <- 20/1
pngFiles <- mixedsort(list.files("pics", pattern="*png$", full.name=TRUE))
mixedsort(pngFiles)
if (exists("rasterImage")) {
mar.default <- c(5,4,4,2)
par(mar = mar.default + c(0, 4, 0, 0),bg=NA)
plot(mydata[,4],mydata[,3], type='n',xlim = rev(range(mydata[,4])),main="Satiety Index Vs. Glycemic Index",xlab="Glycemic Index", ylab="Satiety Index",font=2,font.lab=2,cex.lab=2,cex.axis=2,cex.main=3,panel.first=grid(lwd = 2))
i = 4
rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
i=29
#rasterImage(readPNG(pngFiles[i], TRUE), mydata[i,4]-dimX, mydata[i,3]-dimy, mydata[i,4]+dimX, mydata[i,3]+dimy)
dev.off()
}
